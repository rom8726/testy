- name: success test
  fixtures:
    - dataset

  mockServers:
    notification:
      routes:
        - method: POST
          path: /send
          response:
            status: 202
            headers: {"Content-Type": "application/json"}
            json: '{"status":"queued"}'

  mockCalls:
    - mock: notification
      count: 1
      expect:
        method: POST
        path: /send
        body:
          contains: "Joseph"

  steps:
    - name: auth
      request:
        method: POST
        path: /auth
        headers:
          Content-Type: application/json
        body: {"username":"user", "password":"password"}
      response:
        status: 200
        headers: {"Content-Type": "application/json"}
    - name: get_users
      request:
        method: GET
        path: /users
        headers:
          Authorization: '{{auth.response.token}}'
      response:
        status: 200
        headers: {"Content-Type": "application/json"}
        json: |
          {
            "users": [
              {"id": 1, "name": "User1"},
              {"id": 2, "name": "User2"}
            ]
          }
    - name: add_user
      request:
        method: POST
        path: /users/add
        headers:
          Content-Type: application/json
          Authorization: '{{auth.response.token}}'
        body: {"name":"Joseph"}
      response:
        status: 200
        headers: {"Content-Type": "application/json"}
      dbChecks:
        - query: SELECT COUNT(*) AS count FROM users
          result: |
            [{"count": 3}]
        - query: SELECT id, name FROM users ORDER BY id
          result:
            - id: 1
              name: "User1"
            - id: 2
              name: "User2"
            - id: 3
              name: "Joseph"
    - name: get_users_again
      request:
        method: GET
        path: /users
        headers:
          Authorization: '{{auth.response.token}}'
      response:
        status: 200
        headers: {"Content-Type": "application/json"}
        json: |
          {
            "users": [
              {"id": 1, "name": "User1"},
              {"id": 2, "name": "User2"},
              {"id": 3, "name": "Joseph"}
            ]
          }
    - name: get_joseph
      request:
        method: GET
        path: /user/{{get_users_again.response.users[2].id}}
        headers:
          Authorization: '{{auth.response.token}}'
      response:
        status: 200
        headers: {"Content-Type": "application/json"}
        json: '{"id": 3, "name": "Joseph"}'
      dbChecks:
        - query: SELECT id, name FROM users WHERE id = {{get_users_again.response.users[2].id}}
          result:
            - id: 3
              name: "Joseph"
